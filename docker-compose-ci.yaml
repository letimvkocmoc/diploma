# Определение версии docker compose и начало описания сервисов
version: "3.9"

services:
  db:
    image: postgres:15.2
    env_file: .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: always
    container_name: db
    volumes:
      - db_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 15

  api:
    image: letimvkocmoc/whats_on_plan:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
    container_name: api
    command: python manage.py runserver 0.0.0.0:8000
    env_file: .env
    environment:
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
    restart: always
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app

  migrations:
    image: letimvkocmoc/whats_on_plan:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
    container_name: migrations
    env_file: .env
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
    depends_on:
      db:
        condition: service_healthy
    command:
      sh -c "python ./manage.py migrate"

  frontend:
    image: sermalenk/skypro-front:lesson-35
    container_name: frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_started

volumes:
  db_data:

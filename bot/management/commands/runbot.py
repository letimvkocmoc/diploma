import logging
from django.conf import settings
from django.core.management import BaseCommand
from bot.models import TgUser
from bot.tg.client import TgClient
from bot.tg.dc import Message
from goals.models import Goal, GoalCategory, BoardParticipant, Board

# =============== Enable logging  ==============================
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)
logger.info("start bot")

user_states = {'state': {}}
cat_id = []
logger.info(user_states)
logger.info(cat_id)


class Command(BaseCommand):
    help = "run bot"

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.tg_client = TgClient(settings.BOT_TOKEN)

    def handle(self, *args, **kwargs):
        offset = 0
        while True:
            res = self.tg_client.get_updates(offset=offset)
            for item in res.result:
                offset = item.update_id + 1
                self.handle_message(item.message)

    def handle_message(self, msg: Message):
        # logger.info(f'{msg}')
        tg_user, created = TgUser.objects.get_or_create(user_ud=msg.from_.id, defaults={"chat_id": msg.chat.id, "username": msg.from_.username})
        if "/start" in msg.text:
            self.tg_client.send_message(
                msg.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n"
                             'BOT –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                             '/board -> –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –∑–∞–¥–∞—á\n'
                             '/goal_category -> –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n'
                             '/goals -> –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π\n'
                             '/create -> –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ü–µ–ª–∏\n'
                             '/cancel -> –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è)\n')

        if tg_user.user:
            self.handle_verified_user(msg, tg_user)
        else:
            self.handle_user_without_verification(msg, tg_user)

    #
    def handle_user_without_verification(self, msg: Message, tg_user: TgUser):
        """ –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ """
        self.tg_client.send_message(
            msg.chat.id,
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç @what_on_plan_bot\n'
            '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å\n'
            '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ http://158.160.114.142/\n',
        )
        tg_user.set_verification_code()
        tg_user.save(update_fields=["verification_code"])
        self.tg_client.send_message(msg.chat.id, f"–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥: {tg_user.verification_code}")

    def handle_verified_user(self, msg: Message, tg_user: TgUser):
        """ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
        :param: /goals -> –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        :param: /create -> –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ü–µ–ª–∏
        :param: /cancel -> –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è)
        :param: /goal_category -> –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        :param: /board -> –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –∑–∞–¥–∞—á
        :param: /choose -> –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        allowed_commands = ['/goals', '/create', '/cancel']

        if not msg.text:
            return
        if "/start" in msg.text:
            return
        if "/board" in msg.text:
            self.fetch_board(msg, tg_user)
        elif '/goal_category' in msg.text:
            self.fetch_category(msg, tg_user)
        elif '/goals' in msg.text:
            self.fetch_tasks(msg, tg_user)
        elif '/create' in msg.text:
            self.handle_categories(msg, tg_user)
        elif '/cancel' in msg.text:
            self.get_cancel(msg, tg_user)

        elif ('user' not in user_states['state']) and (msg.text not in allowed_commands):
            self.tg_client.send_message(tg_user.chat_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')

        elif (msg.text not in allowed_commands) and (user_states['state']['user']) and ('category' not in user_states['state']):
            category = self.handle_save_category(msg, tg_user)
            if category:
                user_states['state']['category'] = category
                self.tg_client.send_message(tg_user.chat_id, f'–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:\n {category}.\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ü–µ–ª–∏.')

        elif (msg.text not in allowed_commands) and (user_states['state']['user']) and (user_states['state']['category']) and ('goal_title' not in user_states['state']):
            user_states['state']['goal_title'] = msg.text
            logger.info(user_states)
            goal = Goal.objects.create(title=user_states['state']['goal_title'], user=user_states['state']['user'], category=user_states['state']['category'],)
            self.tg_client.send_message(tg_user.chat_id, f'–¶–µ–ª—å: {goal} —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î')
            del user_states['state']['user']
            del user_states['state']['msg_chat_id']
            del user_states['state']['category']
            del user_states['state']['goal_title']
            cat_id.clear()

    def fetch_board(self, msg: Message, tg_user: TgUser):
        """ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ Board. –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç Board, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        boards = BoardParticipant.objects.filter(user=tg_user.user)
        # logger.info(boards)
        if boards:
            [self.tg_client.send_message(msg.chat.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫: {item.board}\n") for item in boards]
        else:
            self.tg_client.send_message(msg.chat.id, "–ù–µ—Ç —É –≤–∞—Å Board")

    def fetch_category(self, msg: Message, tg_user: TgUser):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
        –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç.
        """
        resp_categories: list[str] = [
            f'{category.id} {category.title}'
            for category in GoalCategory.objects.filter(
                board__participants__user=tg_user.user_id, is_deleted=False)]
        if resp_categories:
            self.tg_client.send_message(msg.chat.id, "üè∑ –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n===================\n" + '\n'.join(resp_categories))
        else:
            self.tg_client.send_message(msg.chat.id, '–£ –í–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!')

    def handle_categories(self, msg: Message, tg_user: TgUser):
        """
         –ü–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å
        ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞
        """
        categories = GoalCategory.objects.filter(user=tg_user.user)
        if categories.count() > 0:
            cat_text = ''
            for cat in categories:
                cat_text += f'{cat.id}: {cat.title} \n'
                cat_id.append(cat.id)
            self.tg_client.send_message(
                chat_id=tg_user.chat_id,
                text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏:\n========================\n{cat_text}'
                     f'–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'
            )
            if 'user' not in user_states['state']:
                user_states['state']['user'] = tg_user.user
                user_states['state']['msg_chat_id'] = tg_user.chat_id
                logger.info(user_states)
        else:
            self.tg_client.send_message(msg.chat.id, '—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç')

    def fetch_tasks(self, msg: Message, tg_user: TgUser):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
        –ï—Å–ª–∏ —Ü–µ–ª–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ü–µ–ª–µ–π –Ω–µ—Ç.
        """
        goals = Goal.objects.filter(user=tg_user.user)
        if goals.count() > 0:
            [self.tg_client.send_message(tg_user.chat_id,
                                         f'–ù–∞–∑–≤–∞–Ω–∏–µ: {goal.title},\n'
                                         f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {goal.category},\n'
                                         f'–°—Ç–∞—Ç—É—Å: {goal.get_status_display()},\n'
                                         f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {goal.user},\n'
                                         f'–î–µ–¥–ª–∞–π–Ω {goal.due_date if goal.due_date else "–ù–µ—Ç"} \n') for goal in goals]
        else:
            self.tg_client.send_message(msg.chat.id, "–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø—É—Å—Ç.")

    @staticmethod
    def handle_save_category(msg: Message, tg_user: TgUser):
        """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è """
        category_id = int(msg.text)
        category_data = GoalCategory.objects.filter(user=tg_user.user).get(pk=category_id)
        return category_data

    def get_cancel(self, msg: Message, tg_user: TgUser):
        if 'user' in user_states['state']:
            del user_states['state']['user']
            del user_states['state']['msg_chat_id']

            if 'category' in user_states['state']:
                del user_states['state']['category']

            if 'goal_title' in user_states['state']:
                del user_states['state']['goal_title']
        self.tg_client.send_message(tg_user.chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
